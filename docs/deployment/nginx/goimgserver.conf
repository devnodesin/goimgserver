# Nginx reverse proxy configuration for goimgserver

upstream goimgserver {
    server 127.0.0.1:9000;
    
    # For Docker deployments, use:
    # server goimgserver:9000;
    
    keepalive 32;
}

# Cache configuration
proxy_cache_path /var/cache/nginx/goimgserver 
    levels=1:2 
    keys_zone=imgcache:100m 
    max_size=10g 
    inactive=30d 
    use_temp_path=off;

# Rate limiting
limit_req_zone $binary_remote_addr zone=imgapi:10m rate=100r/m;
limit_req_status 429;

server {
    listen 80;
    server_name img.example.com;
    
    # Redirect to HTTPS (uncomment for production)
    # return 301 https://$server_name$request_uri;
    
    # Access logs
    access_log /var/log/nginx/goimgserver_access.log;
    error_log /var/log/nginx/goimgserver_error.log;
    
    # Client body size limit
    client_max_body_size 100M;
    
    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Image endpoints
    location /img/ {
        # Rate limiting
        limit_req zone=imgapi burst=10 nodelay;
        
        # Proxy settings
        proxy_pass http://goimgserver;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Caching
        proxy_cache imgcache;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_valid 200 30d;
        proxy_cache_valid 404 1h;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        
        # Cache headers
        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public, max-age=2592000"; # 30 days
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range" always;
        
        # Security headers
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        
        # Handle OPTIONS requests
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Max-Age 3600;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
    
    # Command endpoints (restrict access)
    location /cmd/ {
        # IP whitelist for admin commands
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
        
        # No caching for commands
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        
        # Proxy settings
        proxy_pass http://goimgserver;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Health check endpoints
    location /health {
        proxy_pass http://goimgserver;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # No caching for health checks
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        
        access_log off;
    }
    
    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# HTTPS configuration (uncomment and configure for production)
#server {
#    listen 443 ssl http2;
#    server_name img.example.com;
#    
#    # SSL certificates
#    ssl_certificate /etc/nginx/ssl/cert.pem;
#    ssl_certificate_key /etc/nginx/ssl/key.pem;
#    
#    # SSL configuration
#    ssl_protocols TLSv1.2 TLSv1.3;
#    ssl_ciphers HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers on;
#    ssl_session_cache shared:SSL:10m;
#    ssl_session_timeout 10m;
#    
#    # HSTS
#    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#    
#    # Include locations from HTTP block above
#    # ... (copy location blocks from above)
#}
